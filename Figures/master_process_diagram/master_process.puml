@startuml
skinparam componentStyle uml2
skinparam component {
  backgroundColor<<deployment-specific>> Aqua
  backgroundColor<<.mat file>> Green
}

skinparam interface {
  backgroundColor<<deployment-specific>> Aqua
  backgroundColor<<.mat file>> Green
}

skinparam cloud {
  backgroundColor Magenta
}

/' Instrument Database '/
database "Instrument Database" {
  [serial number] as db_sn
  [instrument type] as db_it
  [instrument parsing function] as db_pf
  [output naming convention] as db_on
}
db_sn -do- db_it
db_it -do- db_pf
db_it -do- db_on

/' Deployment '/
component "Deployment\n" as dep {

  frame "Deployment Spreadsheet" {
    [start time] <<deployment-specific>> as ss_st
    [end time] <<deployment-specific>> as ss_et
    [instrument serial numbers] <<deployment-specific>> as ss_sn
    [depth offsets] <<deployment-specific>> as ss_nd
  }
  
  frame "Raw Instrument Data" {
    [sensor data] <<deployment-specific>> as dat_sens
    [nav data] <<deployment-specific>> as dat_nav
  }

}

/' User-defined Information '/
component "User-Defined Information\n" as user_info {
  [deployment name] <<deployment-specific>> as depname
  [processing options] <<deployment-specific>> as opt_dep  
}


interface "spreadsheet converter" <<deployment-specific>> as ss_read_dep_m        
interface "data locator" <<deployment-specific>> as parse_dep_m
/' Master Process '/

component "process_master.m\n" as master {
  interface "read_spreadsheet.m" as ss_read_m
  interface "parse_raw_data.m" as parse_m
  interface "read_options.m" as opt_read
  component "process_setup.m\n" as setup {
    [default processing options] as setup1
    [processing options] as setup2
    setup1   -l-> setup2
    opt_dep  ..>  opt_read
    opt_read -l-> setup2
  }
  component "process_pre.m\n" as preproc {
    [read spreadsheet] as ss_read
    [parse raw data] as parse
    [additional preprocessing] <<deployment-specific>> as preproc_dep
    [save preprocessed data] as preproc_save
    ss_read     -r-> parse
    parse       -r-> preproc_dep
    preproc_dep -r-> preproc_save
  }
  setup -d-> preproc
  component "preprocessed data\n" as dat_pre {
    [nav] <<.mat file>> as nav_pre
    [sensors] <<.mat file>> as sens_pre
  }
  preproc_save -do-> dat_pre
  component "process_main.m\n" as proc {
    [correct instrument timestamps] as main1
    [correct instrument positions] as main2
    [grid data] as main3
    [final processing]  as main4
    [additional processing] <<deployment-specific>> as main5
    [save final data] as proc_save
    main1 -> main2
    main2 -> main3
    main3 -> main4
    main4 -> main5
    main5 -> proc_save
  } 
  dat_pre -do-> proc
}


/' Final output '/
[final output data] <<.mat file>> as final
cloud "DropBox / external server" as dbox
proc_save --> final
final --> dbox

/' User provides deployment name as input to master process '/
interface "User" as user
depname .. user
user --> master : input


/' Link spreadsheet serial num to database serial num '/
ss_sn -- db_sn

/' Link components & interface for spreadsheet read '/
ss_st ..> ss_read_dep_m
ss_et ..> ss_read_dep_m
ss_sn ..> ss_read_dep_m
ss_nd ..> ss_read_dep_m
ss_read_dep_m -r-> ss_read_m
ss_read <-u- ss_read_m

/' Link components and interface for raw parse '/
dat_sens   ..> parse_dep_m
dat_nav ..> parse_dep_m
parse_dep_m --> parse_m
parse <-u- parse_m


@enduml
