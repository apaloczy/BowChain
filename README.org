#+TITLE: BowChain
#+AUTHOR: Dylan Winters

* Overview
Process a bow chain dataset using =BowChain_master(cruiseName,deploymentName)=.

* Configuration

** Deployment configuration

Within the [[file:Code/][Code]] directory, cruise-specific folders contain information needed to
locate and process deployment data. Each cruise needs a ~cruise_config~ file
that returns a structure containing configuration information for each
deployment.

For example, [[file:Code/Cruise_ArcticMix/config_ArcticMix.m][Cruse_ArcticMix/config_ArcticMix.m]] creates a structure containing
deployment information for the ArcticMix cruise. Only one deployment entry is
shown below:

#+BEGIN_SRC matlab
  %% Deployment setup
  config(1).name = 'MooringToIce'
  config(1).dir_raw = '/path/to/raw/data/11sept_1900_recovery';
  config(1).dn_range = datenum([...
      '09-Sep-2015 21:49:40';
      '10-Sep-2015 08:36:14']);
  config(1).sensor_sn ={'00451';'100161';'100154';'060281';'00407';'100160';...
                        '100153';'00445';'100157';'00422';'100159';'100158';'00442';...
                        '100162';'03253';'100155';'00392';'00372';'060280';'100156'};
  config(1).sensor_pos = [0 1 2 3 4 5 6 7 8 9 11 12 13 14 14.5 15 16 17 18 19];
#+END_SRC

*** Required configuration options 

| Option        | Description                                                     | Default       |
|---------------+-----------------------------------------------------------------+---------------|
| =freq_base=   | Frequency of the output gridded data                            | 2             |
| =dir_raw=     | Full path to the directory containing the deployment's raw data | -             |
| =dn_range=    | Range of datenums for the deployment start and end times        | -             |
| =sensor_sn=   | Cell array of sensor serial numbers (as strings)                | -             |
| =sensor_pos=  | Nominal positions of sensors along the chain                    | -             |
| =chain_model= | Model used to accout for the bow chain's shape                  | 'cm_straight' |

An error will be thrown before processing begins if any of these options have
not been specified. For example, if the raw data location for Deploy06 of the
ASIRI_2015 cruise is undefined, execution will halt with the following error:

#+BEGIN_SRC matlab
  >> BowChain_master('ASIRI_2015')
  Error using get_config (line 45)
  Missing deployment configuration in Cruise_ASIRI_2015/config_ASIRI_2015.m:
    Deploy06: dir_raw (Path to deployment's raw data directory)
#+END_SRC

*Any field that does not have a default value must be defined for each deployment in the cruise's config file.*

*** Locating instrument data

Data organization might change between cruises, but is likely consistent for
each cruise. By default, it is assumed that all raw data files (from every
instrument) reside in the deployments ~config.dir_raw~ folder.

Within each cruise folder, an optional ~sensor_dirs_<cruise>~ function can be
defined if more complex organization is required. This function takes a
deployment's config structure entry and an instrument serial number as input and
returns a new directory name for that particular instrument's raw data folder.

Again using the ArctixMix deployment example:

In the case of the /MooringToIce/ deployment, raw instrument data was organized
into instrument-specific directories within the ~config.dir_raw~ folder. The
[[file:Code/Cruise_ArcticMix/sensor_dirs_ArcticMix.m][sensor_dirs_ArcticMix]] function is thus straightforward - we just need to append
the serial number to the deployment's ~config.dir_raw~ field.

#+BEGIN_SRC matlab
  function sensor_dir = sensor_dirs_ArcticMix(config,sn)
  sensor_dir = fullfile(config.dir_raw,sn);
#+END_SRC

Note that since the ~config~ structure contains the deployment's name, and a
single instrument serial number is given as input, this function allows for
extreme flexibility down to the level of instrument-specific folders on a
per-deployment basis. This is hopefully not required with good data
organization!


** Instrument configuration

Each instrument is linked to an instrument type via its serial number, and each
instrument type is linked to a parsing function and a raw data file extension.
This is all done in [[file:Code/get_sensor_info.m][get_sensor_info.m]], which takes a serial number string as
input.

*Any instruments that I have not encountered will not be included in this list!*
Fortunately, associating serial numbers to instruments can be easily done by
modifying the first few lines of [[file:Code/get_sensor_info.m][get_sensor_info]] to include new serial numbers:

#+BEGIN_SRC matlab
  %% Instrument serial numbers

  % SBE39
  sbe39 = {'03253'};

  % SBE56
  sbe56 = {'00372','00392','00407','00422','00442','00445','00451'};

  % RBR Solo
  rbr_solo = {'100153','100154','100155','100156','100157','100158',...
              '100159','100160','100161','100162'};

  % RBR Concerto
  rbr_concerto = {'060280','060281'};
#+END_SRC

This method allows finding and parsing raw data to be generalized to a function
of instrument serial number, but requires wrappers around low-level instrument
parsing functions so that the output data format is consistent across all
instrument types. This makes adding a new instrument type a little more
complicated, but still relatively straightforward.

The following files in the [[file:Code/ParseFunctions/][Code/ParseFunctions/]] directory are all examples of
such "wrapper" functions:

- [[file:Code/ParseFunctions/parse_rbr_concerto.m]]
- [[file:Code/ParseFunctions/parse_rbr_solo.m]]
- [[file:Code/ParseFunctions/parse_sbe39.m]]
- [[file:Code/ParseFunctions/parse_sbe56.m]]

These functions are simple, but necessary - they call low-level raw
data parsing functions and restructure the output to facilitate later data
processing.

See the latter half of [[file:Code/get_sensor_info.m][get_sensor_info.m]] for associations between instrument
types and parsing functions.

** Setting configuration options with fill_defaults

This section can be safely ignored, but might be useful.

The [[file:Code/fill_defaults.m][fill_defaults]] function can be used at any stage of setup to apply a set of
default options to a cruise's deployment configuration structure. It is used in
the core code to apply the default ~freq_base~ and ~chain_model~ parameters
shown in the table above. Only options that are undefined will be filled -
existing options will not be overwritten.

* Chain Shape Models

1. [[Org/cm_straight.org][cm_straight]]
